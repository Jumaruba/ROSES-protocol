use std::collections::HashSet;

use handoff_register::{handoff::Handoff, types::NodeId};

#[test]
pub fn verify(){
    let mut C1: Handoff<i32> = Handoff::new(NodeId::new(1, "C".to_string()), 0);
    let mut S0: Handoff<i32> = Handoff::new(NodeId::new(0, "S".to_string()), 0);
    let mut S1: Handoff<i32> = Handoff::new(NodeId::new(1, "S".to_string()), 0);
    let mut S2: Handoff<i32> = Handoff::new(NodeId::new(2, "S".to_string()), 0);
    println!("ADD 9");
    C1.add_elem(9);
    S1.merge(&C1.clone());
    println!("SERVER {}",S1);
    S1.merge(&S2);
    println!("{} MERGE WITH SERVER {}",S1, S2);
    println!("{}", S1);
    S1.merge(&C1.clone());
    println!("SERVER {}",S1);
    S0.merge(&S1);
    println!("{} MERGE WITH SERVER {}",S0, S1);
    println!("{}", S0);
    println!("ADD 4");
    C1.add_elem(4);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    println!("ADD 5");
    C1.add_elem(5);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    S1.merge(&C1.clone());
    println!("SERVER {}",S1);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    println!("RM 4");
    C1.rm_elem(4);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    println!("ADD 2");
    C1.add_elem(2);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S1.merge(&C1.clone());
    println!("SERVER {}",S1);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    println!("ADD 9");
    C1.add_elem(9);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    println!("ADD 8");
    C1.add_elem(8);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    println!("ADD 8");
    C1.add_elem(8);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    S1.merge(&C1.clone());
    println!("SERVER {}",S1);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    println!("RM 9");
    C1.rm_elem(9);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    println!("ADD 3");
    C1.add_elem(3);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S2.clone());
    println!("CLI {}",C1);
    S0.merge(&C1.clone());
    println!("SERVER {}",S0);
    C1.merge(&S0.clone());
    println!("CLI {}",C1);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    C1.merge(&S1.clone());
    println!("CLI {}",C1);
    S2.merge(&C1.clone());
    println!("SERVER {}",S2);
    let res = HashSet::from([2, 3, 5, 8]);
    assert_eq!(C1.fetch(), res);
    assert_eq!(S0.fetch(), res);
    assert_eq!(S1.fetch(), res);
    println!("{:?}", S1.fetch());
    assert_eq!(S2.fetch(), res);
}